[gd_scene load_steps=6 format=3 uid="uid://bwshjyle5cfut"]

[sub_resource type="Shader" id="Shader_vx8sv"]
code = "shader_type spatial;

uniform float height : hint_range(-2.0, 0.0, 0.001) = -0.05;
uniform float wavelength : hint_range(0.1, 5.0, 0.001) = 1.0;
uniform float direction : hint_range(0.0, 6.2831, 0.001) = 0.0;

//see https://en.wikipedia.org/wiki/Trochoidal_wave
//abc are the lagrangian coordinates (xyz0)
//time the time
//theta the direction
//lambda the wavelength
//returns an offset.
vec3 addWave(vec3 abc, float time, float theta, float lambda) {
	vec2 d = vec2(cos(theta), sin(theta));
	float a = dot(d, abc.xz);
	float b = abc.y;
	float k = 2.0 * PI / lambda;
	float c = sqrt(9.8 / k);

	return vec3(
		d.x * (exp(k * b) / k) * sin(k * (a + c * time)),
		-1. * (exp(k * b) / k) * cos(k * (a + c * time)),
		d.y * (exp(k * b) / k) * sin(k * (a + c * time))
	);
}

void vertex () {
	vec3 v = VERTEX;
	v.y = height;
	v += addWave(v, TIME, direction, wavelength);
	VERTEX = v;
}

//Draw a grid on the surface
void fragment() {
	vec2 uv = UV * 32.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO = vec3(1.0);
	else ALBEDO = vec3(0.8);
	
	uv = UV * 8.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.5);
	
	uv = UV * 2.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.2);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_di48i"]
render_priority = 0
shader = SubResource("Shader_vx8sv")
shader_parameter/height = -0.3
shader_parameter/wavelength = 2.7
shader_parameter/direction = 3.9

[sub_resource type="PlaneMesh" id="PlaneMesh_c4o2n"]
size = Vector2(10, 10)
subdivide_width = 512
subdivide_depth = 512

[sub_resource type="Shader" id="Shader_01wr7"]
code = "shader_type spatial;

uniform float height : hint_range(-2.0, 0.0, 0.001) = -0.05;
uniform float wavelength : hint_range(0.1, 5.0, 0.001) = 1.0;
uniform float direction : hint_range(0.0, 6.2831, 0.001) = 0.0;

//See https://www.geogebra.org/calculator/ctyaxuma
vec3 addWave(vec3 v, float time, float theta, float lambda, float steepness) {
	vec2 d = vec2(cos(theta), sin(theta));
	float a = dot(d, v.xz);
	float b = v.y;

	float k = 2.0 * PI / lambda;
	float c = sqrt(9.8 / k);

	return vec3(
		0,
		(exp(k * b) / k) * (pow(cos(k * (a + c * time)) * 0.5 + 0.5, steepness) * 2.0 - 1.0), 
		0
	);
}

void vertex () {
	vec3 v = VERTEX;
	v.y = height;
	v += addWave(v, TIME, direction, wavelength, 2.0);
	VERTEX = v;
}

//Draw a grid on the surface
void fragment() {
	vec2 uv = UV * 32.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO = vec3(1.0);
	else ALBEDO = vec3(0.8);
	
	uv = UV * 8.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.5);
	
	uv = UV * 2.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.2);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_klpso"]
render_priority = 0
shader = SubResource("Shader_01wr7")
shader_parameter/height = -0.3
shader_parameter/wavelength = 2.7
shader_parameter/direction = 3.9

[node name="Root" type="Node3D"]

[node name="Particles" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_di48i")
mesh = SubResource("PlaneMesh_c4o2n")

[node name="Profiles" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -11)
material_override = SubResource("ShaderMaterial_klpso")
mesh = SubResource("PlaneMesh_c4o2n")
