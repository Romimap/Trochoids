[gd_scene load_steps=7 format=3 uid="uid://bwshjyle5cfut"]

[ext_resource type="Script" path="res://scenes/Particles.gd" id="1_lwe7n"]

[sub_resource type="Shader" id="Shader_vx8sv"]
code = "shader_type spatial;

uniform float height : hint_range(-2.0, 0.0, 0.001) = -0.05;
uniform float wavelength : hint_range(0.1, 5.0, 0.001) = 1.0;
uniform float wavefrequency : hint_range(0.1, 5.0, 0.001) = 0.1;
uniform float direction : hint_range(0.0, 6.2831, 0.001) = 0.0;
uniform float pointsampling : hint_range(0.1, 2.0, 0.01) = 0.5;
uniform bool moveXZ = true;

uniform vec4[256] lookuptable;

uniform float test;

// Return offset of trochoid centered on abc
vec2 trochoidoffset(vec3 abc, float time, float theta, float lambda, float frequency)
{
	vec2 d = vec2(cos(theta), sin(theta));
	
	float k = 2.0 * PI / lambda;
	float omega = 2.0 * PI * frequency;
	
	float x = dot(abc.xz,d);
	float b = abc.y;
	
	return vec2(
		(exp(k * b) / k) * sin(k * x - omega * time),
		- (exp(k * b) / k) * cos(k * x - omega * time)
	);
}

// Return coordinates of trochoid centered on abc
vec2 trochoid(vec3 abc, float time, float theta, float lambda, float frequency)
{
	vec2 trocho = trochoidoffset(abc, time, theta, lambda, frequency);
	
	return trocho + vec2(abc.x * cos(theta) + abc.z * sin(theta), abc.y);
}

float interp(vec2 a, vec2 b, float x)
{
	return (a.x - x) / (a.x - b.x) * (b.y - a.y) + a.y;
}

//see https://en.wikipedia.org/wiki/Trochoidal_wave
//abc are the lagrangian coordinates (xyz0)
//time the time
//theta the direction
//lambda the wavelength
//returns an offset.
vec3 addWave(vec3 abc, float time, float theta, float lambda) {
	vec2 d = vec2(cos(theta), sin(theta));
	float a = dot(d, abc.xz);
	float b = abc.y;
	float k = 2.0 * PI / lambda;
	float c = sqrt(9.8 / k);

	return vec3(
		d.x * (exp(k * b) / k) * sin(k * (a + c * time)),
		-1. * (exp(k * b) / k) * cos(k * (a + c * time)),
		d.y * (exp(k * b) / k) * sin(k * (a + c * time))
	);
}

//see https://en.wikipedia.org/wiki/Trochoidal_wave
//abc are the lagrangian coordinates (xyz0)
//time the time
//theta the direction
//lambda the wavelength
//returns an offset.
vec3 addWaveNewMethod(vec3 abc, float time, float theta, float lambda, float frequency) {
	
	vec2 trocho =  trochoidoffset(abc, time, theta, lambda, frequency);
	
	return vec3(
		cos(theta) * trocho.x,
		trocho.y,
		sin(theta) * trocho.x
	);
}

// Return the height of a wave at given coordinates
float waveHeight(vec3 abc, float time, float theta, float lambda, float frequency) {
	vec2 d = vec2(cos(theta), sin(theta));
	float a = dot(d, abc.xz);
	float b = abc.y;
	float k = 2.0 * PI / lambda;
	float c = sqrt(9.8 / k);

	return trochoid(abc, time, theta, lambda, frequency).y;
}

// Return the wave height by interpolating between two point on a trochoidal trajectory
float waveHeightInterpolation(vec3 abc, float time, float theta, float lambda, float frequency) {
	vec2 d = vec2(cos(theta), sin(theta));
	
	float b = abc.y;
	float k = 2.0 * PI / lambda;
	
	vec3 offset =  pointsampling * vec3(d.x,0.0,d.y);

	vec2 interp1 = trochoid(abc - offset, time, theta, lambda, frequency);
	vec2 interp2 = trochoid(abc + offset, time, theta, lambda, frequency);
	
	return interp(interp2, interp1, dot(d,abc.xz));
}

void vertex () {
	vec3 v = VERTEX;
	v.y = height;
//	if(!moveXZ)
//		v.y += waveHeightInterpolation(v, TIME, direction, wavelength, wavefrequency);
//	else
//		v += addWaveNewMethod(v, TIME, direction, wavelength, wavefrequency);
	VERTEX.y = test;
}

//Draw a grid on the surface
void fragment() {
	vec2 uv = UV * 32.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO = vec3(1.0);
	else ALBEDO = vec3(0.8);
	
	uv = UV * 8.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.5);
	
	uv = UV * 2.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.2);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_di48i"]
render_priority = 0
shader = SubResource("Shader_vx8sv")
shader_parameter/height = -0.217
shader_parameter/wavelength = 2.7
shader_parameter/wavefrequency = 0.968
shader_parameter/direction = 3.9
shader_parameter/pointsampling = 0.1
shader_parameter/moveXZ = false
shader_parameter/lookuptable = PackedFloat32Array(0)
shader_parameter/test = 0.0

[sub_resource type="PlaneMesh" id="PlaneMesh_c4o2n"]
size = Vector2(10, 10)
subdivide_width = 512
subdivide_depth = 512

[sub_resource type="Shader" id="Shader_01wr7"]
code = "shader_type spatial;

uniform float height : hint_range(-2.0, 0.0, 0.001) = -0.05;
uniform float wavelength : hint_range(0.1, 5.0, 0.001) = 1.0;
uniform float direction : hint_range(0.0, 6.2831, 0.001) = 0.0;

//See https://www.geogebra.org/calculator/ctyaxuma
vec3 addWave(vec3 v, float time, float theta, float lambda, float steepness) {
	vec2 d = vec2(cos(theta), sin(theta));
	float a = dot(d, v.xz);
	float b = v.y;

	float k = 2.0 * PI / lambda;
	float c = sqrt(9.8 / k);

	return vec3(
		0,
		(exp(k * b) / k) * (pow(cos(k * (a + c * time)) * 0.5 + 0.5, steepness) * 2.0 - 1.0), 
		0
	);
}

void vertex () {
	vec3 v = VERTEX;
	v.y = height;
	v += addWave(v, TIME, direction, wavelength, 2.0);
	VERTEX = v;
}

//Draw a grid on the surface
void fragment() {
	vec2 uv = UV * 32.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO = vec3(1.0);
	else ALBEDO = vec3(0.8);
	
	uv = UV * 8.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.5);
	
	uv = UV * 2.0;
	uv = mod(uv, vec2(2.0)) - vec2(1.0);
	if (sign(uv.x) == sign(uv.y)) ALBEDO *= vec3(0.2);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_klpso"]
render_priority = 0
shader = SubResource("Shader_01wr7")
shader_parameter/height = -0.3
shader_parameter/wavelength = 2.7
shader_parameter/direction = 3.9

[node name="Root" type="Node3D"]

[node name="Particles" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.119472, 1.65278, 0.728192)
material_override = SubResource("ShaderMaterial_di48i")
mesh = SubResource("PlaneMesh_c4o2n")
script = ExtResource("1_lwe7n")

[node name="Profiles" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -11)
material_override = SubResource("ShaderMaterial_klpso")
mesh = SubResource("PlaneMesh_c4o2n")

[node name="XROrigin3D" type="XROrigin3D" parent="."]

[node name="XRCamera3D" type="XRCamera3D" parent="XROrigin3D"]
transform = Transform3D(0.707107, 0, -0.707107, 0.353553, 0.866025, 0.353553, 0.612372, -0.5, 0.612372, 2, 3, 5)
